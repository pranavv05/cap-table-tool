name: Deploy Cap Table Tool

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging

env:
  NODE_VERSION: '20'

jobs:
  # Security and code quality checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: Validate environment configuration
        run: node scripts/setup-environment.js validate production

  # Code quality and testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-scan
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.local
          node scripts/setup-environment.js create development

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test -- --run --coverage

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: |
          npm run build
          npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            playwright-report/

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build and validation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    outputs:
      build-hash: ${{ steps.build-hash.outputs.hash }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup production environment
        run: |
          echo "NEXT_PUBLIC_APP_URL=${{ vars.APP_URL }}" >> .env.production
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ vars.CLERK_PUBLISHABLE_KEY }}" >> .env.production
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ vars.SUPABASE_URL }}" >> .env.production
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ vars.SUPABASE_ANON_KEY }}" >> .env.production

      - name: Build application
        run: |
          npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Run performance analysis
        run: node scripts/performance-optimization.js analyze

      - name: Generate build hash
        id: build-hash
        run: echo "hash=$(find .next -type f -exec md5sum {} \; | md5sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            public/
            package.json
            package-lock.json
          retention-days: 7

      - name: Upload performance analysis
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis
          path: analysis/
          retention-days: 30

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: ${{ vars.STAGING_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env NODE_ENV=staging'
          alias-domains: ${{ vars.STAGING_DOMAIN }}

      - name: Run database migrations
        run: |
          npm ci
          node scripts/database-management.js migrate
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f ${{ vars.STAGING_URL }}/api/health || exit 1
          npm run test:smoke -- --url=${{ vars.STAGING_URL }}

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ðŸš€ Staging deployment completed
            Branch: ${{ github.ref }}
            URL: ${{ vars.STAGING_URL }}
            Build: ${{ needs.build.outputs.build-hash }}

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Validate production readiness
        run: |
          node scripts/setup-environment.js validate production
          node scripts/performance-optimization.js analyze

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Run database migrations
        run: |
          npm ci
          node scripts/database-management.js migrate
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PRODUCTION_SUPABASE_SERVICE_KEY }}

      - name: Create database backup
        run: node scripts/database-management.js backup
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PRODUCTION_SUPABASE_SERVICE_KEY }}

      - name: Run production health checks
        run: |
          sleep 60
          curl -f ${{ vars.PRODUCTION_URL }}/api/health || exit 1
          node scripts/database-management.js health

      - name: Run production smoke tests
        run: npm run test:smoke -- --url=${{ vars.PRODUCTION_URL }}

      - name: Update monitoring
        run: |
          curl -X POST ${{ secrets.DATADOG_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{
              "title": "Production Deployment",
              "text": "Cap Table Tool deployed to production",
              "tags": ["deployment", "production"],
              "alert_type": "info"
            }'

      - name: Notify successful deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            âœ… Production deployment successful!
            URL: ${{ vars.PRODUCTION_URL }}
            Build: ${{ needs.build.outputs.build-hash }}
            Commit: ${{ github.sha }}

      - name: Notify failed deployment
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ðŸš¨ Production deployment failed!
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Please check the deployment logs immediately.

  # Rollback capability
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Rollback production deployment
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--rollback'

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#alerts",
              "attachments": [{
                "color": "warning",
                "title": "Emergency Rollback Executed",
                "text": "Production has been rolled back to previous version",
                "fields": [{
                  "title": "Triggered by",
                  "value": "${{ github.actor }}",
                  "short": true
                }]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const oldArtifacts = artifacts.artifacts.filter(artifact => 
              artifact.name.includes('build-artifacts') && 
              artifact.created_at < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
            );
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }

      - name: Update deployment status
        run: |
          echo "Deployment completed at $(date)"
          echo "Build hash: ${{ needs.build.outputs.build-hash }}"